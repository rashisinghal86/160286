@app.route('/add_to_booking/<int:service_id>', methods=['POST'])
@auth_reqd
def add_to_booking(service_id):
    if 'user_id' not in session:
        flash('You need to login first')
        return redirect(url_for('login'))
    service=Service.query.get(service_id)
    location = Service.query.get('location')
    date_of_booking = Service.query.get('date_of_booking')
    
    if not service:
        flash('Service does not exist')
        return redirect(url_for('catalogue'))
    
    #location = request.form.get('location')
    #fetch service details from catalogue.html   
    booking = Booking.query.filter_by(customer_id=session['user_id'], service_id=service_id).first()
    if not booking:
        booking = Booking(customer_id=session['user_id'], service_id=service_id,location=location,date_of_booking=date_of_booking)
        db.session.add(booking)
    db.session.commit()
    flash('Service added to booking successfully')
    return redirect(url_for('catalogue'))


@app.route('/bookings')
@auth_reqd
def bookings():
    bookings = Booking.query.filter_by(customer_id=session['user_id']).all()
    
    #total = sum(booking.service.price for booking in bookings)
    return render_template('bookings.html', bookings=bookings)



 #@app.route('/apply/<int:service_id>', methods=['POST'])
# @auth_reqd
# def apply(service_id):
#     service = Service.query.get(service_id)
#     if not service:
#         flash('Service does not exist')
#         return redirect(url_for('catalogue'))
#     user = User.query.get(session['user_id'])
    


def block_professional(id):
    if 'user_id' not in session:
        flash('You need to login first')
        return redirect(url_for('login'))
    
    user = User.query.get(session['user_id'])
    if user.is_admin:
        flash('You have permission to access this page')
        return redirect(url_for('login'))

# @app.route('/view_user2')
# @auth_reqd
# def view_cust():
#     return render_template('cust.html')

# @app.route('/view_appointments')
# def view_appointments():
#     return render_template('appointments.html')

# @app.route('/view_prof')
# @auth_reqd
# def view_prof():
#     return render_template('prof.html')
# @app.route('/add_prof')
# @auth_reqd
# def add_prof():
#     return render_template('professional/add_prof.html')


@app.route('/add_to_booking/<int:service_id>', methods=['POST'])
@auth_reqd
def add_to_booking(service_id):
    service=Service.query.get(service_id)
    if not service:
        flash('Service does not exist')
        return redirect(url_for('catalogue'))
    #request date and time
        
    # quantity = request.form.get('quantity')
    # try:
    #     quantity=int(quantity)
    # except ValueError:
    #     flash('Invalid quantity')
    #     return redirect(url_for('index'))
    # if quantity <= 0 or quantity > product.quantity:
    #     flash(f'Invalid quantity, should be between 1 and {product.quantity}')
    #     return redirect(url_for('index'))

    
    booking = Booking.query.filter_by(customer_id=session['user_id'], service_id=service_id).first()
    id = request.form.get('booking.id')
    service_name = request.form.get('booking.service.name')
    if booking:
    #     if quantity + cart.quantity > product.quantity:
    #         flash(f'Invalid quantity, should be between 1 and {product.quantity}')
    #         return redirect(url_for('index'))
    #     cart.quantity += quantity
    # else:
        booking = Booking(user_id=session['user_id'], service_id=service_id)
        db.session.add(booking)
    db.session.commit()
    flash('Booking sent successfully')
    return render_template('bookings.html', booking=booking, id=id, service_name=service_name)











