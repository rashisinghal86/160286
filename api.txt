

# from flask_restful import Resource, Api, reqparse
# from app import app
# from models import Category, db
# api = Api(app)

# class Resource_Category(Resource):
#     def get(self):
#         categories = Category.query.all()
#         return{'categories':[{ 
#             'id': category.id, 
#             'name': category.name 
#             } for category in categories]}

# class Resource_Category_post(Resource):
#     def post(self):
#         parser = reqparse.RequestParser()
#         parser.add_argument('name', type=str, required=True, help="Category name cannot be blank.")
#         args = parser.parse_args()
#         if Category.query.filter_by(name=args['name']).first():
#             return {'message': 'Category already exists'}, 400
#         new_category = Category(name=args['name'])
#         db.session.add(new_category)
#         db.session.commit()
#         return {
#             'message': 'Category added successfully',
#             'category': {'id': new_category.id, 'name': new_category.name}
#         }, 201
    
# api.add_resource(Resource_Category, '/api/category')
# api.add_resource(Resource_Category_post, '/api/category/<int:id>')





# from flask_restful import Resource, Api, reqparse
# from flask import jsonify, request
# from app import app
# from models import Category

# api = Api(app)

# class Resource_Category_List(Resource):
#     def get(self):
#         """Get a list of all categories."""
#         categories = Category.query.all()
#         return {
#             'categories': [
#                 {
#                     'id': category.id,
#                     'name': category.name,
#                     'service_count': len(category.services)  # Assuming Category has a services relationship
#                 } for category in categories
#             ]
#         }, 200

#     def post(self):
#         """Add a new category."""
#         parser = reqparse.RequestParser()
#         parser.add_argument('name', type=str, required=True, help="Category name cannot be blank.")
#         args = parser.parse_args()

#         if Category.query.filter_by(name=args['name']).first():
#             return {'message': 'Category already exists'}, 400

#         new_category = Category(name=args['name'])
#         db.session.add(new_category)
#         db.session.commit()

#         return {
#             'message': 'Category added successfully',
#             'category': {'id': new_category.id, 'name': new_category.name}
#         }, 201


# class Resource_Category(Resource):
#     def get(self, id):
#         """Get details of a specific category."""
#         category = Category.query.get(id)
#         if not category:
#             return {'message': 'Category not found'}, 404

#         return {
#             'id': category.id,
#             'name': category.name,
#             'services': [
#                 {'id': service.id, 'name': service.name} for service in category.services
#             ]  # Assuming Category has a services relationship
#         }, 200

#     def put(self, id):
#         """Edit a category."""
#         category = Category.query.get(id)
#         if not category:
#             return {'message': 'Category not found'}, 404

#         parser = reqparse.RequestParser()
#         parser.add_argument('name', type=str, required=True, help="Category name cannot be blank.")
#         args = parser.parse_args()

#         category.name = args['name']
#         db.session.commit()

#         return {
#             'message': 'Category updated successfully',
#             'category': {'id': category.id, 'name': category.name}
#         }, 200

#     def delete(self, id):
#         """Delete a category."""
#         category = Category.query.get(id)
#         if not category:
#             return {'message': 'Category not found'}, 404

#         db.session.delete(category)
#         db.session.commit()

#         return {'message': 'Category deleted successfully'}, 200


# # Adding Resources to the API
# api.add_resource(Resource_Category_List, '/api/category')  # For listing and creating categories
# api.add_resource(Resource_Category, '/api/category/<int:id>')  # For specific category actions

# from flask_restful import Resource, Api, reqparse
# from flask import jsonify
# from app import app, db
# from models import Service, Category

# api = Api(app)

# class Resource_Service_List(Resource):
#     def get(self, category_id):
#         """Get all services under a specific category."""
#         category = Category.query.get(category_id)
#         if not category:
#             return {'message': 'Category not found'}, 404

#         services = Service.query.filter_by(category_id=category_id).all()
#         return {
#             'services': [
#                 {
#                     'id': service.id,
#                     'name': service.name,
#                     'type': service.type,
#                     'description': service.description,
#                     'price': service.price,
#                     'location': service.location,
#                     'duration': service.duration
#                 } for service in services
#             ]
#         }, 200

#     def post(self, category_id):
#         """Add a new service to a specific category."""
#         category = Category.query.get(category_id)
#         if not category:
#             return {'message': 'Category not found'}, 404

#         parser = reqparse.RequestParser()
#         parser.add_argument('name', type=str, required=True, help="Service name is required.")
#         parser.add_argument('type', type=str, required=True, help="Service type is required.")
#         parser.add_argument('description', type=str, required=True, help="Description is required.")
#         parser.add_argument('price', type=float, required=True, help="Price must be a valid number.")
#         parser.add_argument('location', type=str, required=True, help="Location is required.")
#         parser.add_argument('duration', type=str, required=True, help="Duration is required.")
#         args = parser.parse_args()

#         if args['price'] <= 0:
#             return {'message': 'Price must be greater than 0'}, 400

#         service = Service(
#             name=args['name'],
#             type=args['type'],
#             description=args['description'],
#             price=args['price'],
#             location=args['location'],
#             duration=args['duration'],
#             category=category
#         )

#         db.session.add(service)
#         db.session.commit()

#         return {
#             'message': 'Service added successfully',
#             'service': {
#                 'id': service.id,
#                 'name': service.name
#             }
#         }, 201


# class Resource_Service(Resource):
#     def get(self, id):
#         """Get details of a specific service."""
#         service = Service.query.get(id)
#         if not service:
#             return {'message': 'Service not found'}, 404

#         return {
#             'id': service.id,
#             'name': service.name,
#             'type': service.type,
#             'description': service.description,
#             'price': service.price,
#             'location': service.location,
#             'duration': service.duration,
#             'category_id': service.category_id
#         }, 200

#     def put(self, id):
#         """Edit a specific service."""
#         service = Service.query.get(id)
#         if not service:
#             return {'message': 'Service not found'}, 404

#         parser = reqparse.RequestParser()
#         parser.add_argument('name', type=str, required=True, help="Service name is required.")
#         parser.add_argument('type', type=str, required=True, help="Service type is required.")
#         parser.add_argument('description', type=str, required=True, help="Description is required.")
#         parser.add_argument('price', type=float, required=True, help="Price must be a valid number.")
#         parser.add_argument('location', type=str, required=True, help="Location is required.")
#         parser.add_argument('duration', type=str, required=True, help="Duration is required.")
#         args = parser.parse_args()

#         if args['price'] <= 0:
#             return {'message': 'Price must be greater than 0'}, 400

#         service.name = args['name']
#         service.type = args['type']
#         service.description = args['description']
#         service.price = args['price']
#         service.location = args['location']
#         service.duration = args['duration']

#         db.session.commit()

#         return {
#             'message': 'Service updated successfully',
#             'service': {
#                 'id': service.id,
#                 'name': service.name
#             }
#         }, 200

#     def delete(self, id):
#         """Delete a specific service."""
#         service = Service.query.get(id)
#         if not service:
#             return {'message': 'Service not found'}, 404

#         db.session.delete(service)
#         db.session.commit()

#         return {'message': 'Service deleted successfully'}, 200


# # Adding Resources to the API
# api.add_resource(Resource_Service_List, '/api/category/<int:category_id>/services')  # Services under a category
# api.add_resource(Resource_Service, '/api/service/<int:id>')  # Specific service actions

# if __name__ == '__main__':
#     app.run(debug=True)

